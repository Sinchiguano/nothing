// Generated by gencpp from file industrial_extrinsic_cal/manual_target_locationGoal.msg
// DO NOT EDIT!


#ifndef INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_MANUAL_TARGET_LOCATIONGOAL_H
#define INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_MANUAL_TARGET_LOCATIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace industrial_extrinsic_cal
{
template <class ContainerAllocator>
struct manual_target_locationGoal_
{
  typedef manual_target_locationGoal_<ContainerAllocator> Type;

  manual_target_locationGoal_()
    : instructions()
    , target_type(0)
    , image_topic()
    , roi_min_x(0)
    , roi_min_y(0)
    , roi_max_x(0)
    , roi_max_y(0)
    , grid_rows(0)
    , grid_cols(0)  {
    }
  manual_target_locationGoal_(const ContainerAllocator& _alloc)
    : instructions(_alloc)
    , target_type(0)
    , image_topic(_alloc)
    , roi_min_x(0)
    , roi_min_y(0)
    , roi_max_x(0)
    , roi_max_y(0)
    , grid_rows(0)
    , grid_cols(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _instructions_type;
  _instructions_type instructions;

   typedef uint32_t _target_type_type;
  _target_type_type target_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _image_topic_type;
  _image_topic_type image_topic;

   typedef uint32_t _roi_min_x_type;
  _roi_min_x_type roi_min_x;

   typedef uint32_t _roi_min_y_type;
  _roi_min_y_type roi_min_y;

   typedef uint32_t _roi_max_x_type;
  _roi_max_x_type roi_max_x;

   typedef uint32_t _roi_max_y_type;
  _roi_max_y_type roi_max_y;

   typedef uint32_t _grid_rows_type;
  _grid_rows_type grid_rows;

   typedef uint32_t _grid_cols_type;
  _grid_cols_type grid_cols;





  typedef boost::shared_ptr< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct manual_target_locationGoal_

typedef ::industrial_extrinsic_cal::manual_target_locationGoal_<std::allocator<void> > manual_target_locationGoal;

typedef boost::shared_ptr< ::industrial_extrinsic_cal::manual_target_locationGoal > manual_target_locationGoalPtr;
typedef boost::shared_ptr< ::industrial_extrinsic_cal::manual_target_locationGoal const> manual_target_locationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace industrial_extrinsic_cal

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'industrial_extrinsic_cal': ['/home/sinchiguano/yumi_depends_ws/devel/share/industrial_extrinsic_cal/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "da35bff99f1ba8b9eb51a8eadd1f4616";
  }

  static const char* value(const ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xda35bff99f1ba8b9ULL;
  static const uint64_t static_value2 = 0xeb51a8eadd1f4616ULL;
};

template<class ContainerAllocator>
struct DataType< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "industrial_extrinsic_cal/manual_target_locationGoal";
  }

  static const char* value(const ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
string instructions\n\
uint32 target_type  \n\
string image_topic\n\
uint32 roi_min_x\n\
uint32 roi_min_y\n\
uint32 roi_max_x\n\
uint32 roi_max_y\n\
uint32 grid_rows\n\
uint32 grid_cols\n\
";
  }

  static const char* value(const ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.instructions);
      stream.next(m.target_type);
      stream.next(m.image_topic);
      stream.next(m.roi_min_x);
      stream.next(m.roi_min_y);
      stream.next(m.roi_max_x);
      stream.next(m.roi_max_y);
      stream.next(m.grid_rows);
      stream.next(m.grid_cols);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct manual_target_locationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::industrial_extrinsic_cal::manual_target_locationGoal_<ContainerAllocator>& v)
  {
    s << indent << "instructions: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.instructions);
    s << indent << "target_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_type);
    s << indent << "image_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.image_topic);
    s << indent << "roi_min_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roi_min_x);
    s << indent << "roi_min_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roi_min_y);
    s << indent << "roi_max_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roi_max_x);
    s << indent << "roi_max_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.roi_max_y);
    s << indent << "grid_rows: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.grid_rows);
    s << indent << "grid_cols: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.grid_cols);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_MANUAL_TARGET_LOCATIONGOAL_H
