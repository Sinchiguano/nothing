# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from industrial_extrinsic_cal/store_mutable_joint_statesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class store_mutable_joint_statesRequest(genpy.Message):
  _md5sum = "6aac6c697d5414bc0fcede8c33981d0e"
  _type = "industrial_extrinsic_cal/store_mutable_joint_statesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Empty empty

================================================================================
MSG: std_msgs/Empty
"""
  __slots__ = ['empty']
  _slot_types = ['std_msgs/Empty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       empty

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(store_mutable_joint_statesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
    else:
      self.empty = std_msgs.msg.Empty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from industrial_extrinsic_cal/store_mutable_joint_statesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class store_mutable_joint_statesResponse(genpy.Message):
  _md5sum = "6aac6c697d5414bc0fcede8c33981d0e"
  _type = "industrial_extrinsic_cal/store_mutable_joint_statesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/Empty empty



================================================================================
MSG: std_msgs/Empty
"""
  __slots__ = ['empty']
  _slot_types = ['std_msgs/Empty']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       empty

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(store_mutable_joint_statesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
    else:
      self.empty = std_msgs.msg.Empty()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.empty is None:
        self.empty = std_msgs.msg.Empty()
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class store_mutable_joint_states(object):
  _type          = 'industrial_extrinsic_cal/store_mutable_joint_states'
  _md5sum = '928fb104d412cd4f5983340b98df1876'
  _request_class  = store_mutable_joint_statesRequest
  _response_class = store_mutable_joint_statesResponse
