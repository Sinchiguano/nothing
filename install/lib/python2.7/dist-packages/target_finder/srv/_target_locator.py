# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from target_finder/target_locatorRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg

class target_locatorRequest(genpy.Message):
  _md5sum = "9d630a50dd674a19af5e228156e7da70"
  _type = "target_finder/target_locatorRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 allowable_cost_per_observation
sensor_msgs/RegionOfInterest roi
geometry_msgs/Pose initial_pose

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['allowable_cost_per_observation','roi','initial_pose']
  _slot_types = ['float64','sensor_msgs/RegionOfInterest','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       allowable_cost_per_observation,roi,initial_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(target_locatorRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.allowable_cost_per_observation is None:
        self.allowable_cost_per_observation = 0.
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.Pose()
    else:
      self.allowable_cost_per_observation = 0.
      self.roi = sensor_msgs.msg.RegionOfInterest()
      self.initial_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_d4IB7d().pack(_x.allowable_cost_per_observation, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.initial_pose.position.x, _x.initial_pose.position.y, _x.initial_pose.position.z, _x.initial_pose.orientation.x, _x.initial_pose.orientation.y, _x.initial_pose.orientation.z, _x.initial_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 81
      (_x.allowable_cost_per_observation, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.initial_pose.position.x, _x.initial_pose.position.y, _x.initial_pose.position.z, _x.initial_pose.orientation.x, _x.initial_pose.orientation.y, _x.initial_pose.orientation.z, _x.initial_pose.orientation.w,) = _get_struct_d4IB7d().unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_d4IB7d().pack(_x.allowable_cost_per_observation, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.initial_pose.position.x, _x.initial_pose.position.y, _x.initial_pose.position.z, _x.initial_pose.orientation.x, _x.initial_pose.orientation.y, _x.initial_pose.orientation.z, _x.initial_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.roi is None:
        self.roi = sensor_msgs.msg.RegionOfInterest()
      if self.initial_pose is None:
        self.initial_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 81
      (_x.allowable_cost_per_observation, _x.roi.x_offset, _x.roi.y_offset, _x.roi.height, _x.roi.width, _x.roi.do_rectify, _x.initial_pose.position.x, _x.initial_pose.position.y, _x.initial_pose.position.z, _x.initial_pose.orientation.x, _x.initial_pose.orientation.y, _x.initial_pose.orientation.z, _x.initial_pose.orientation.w,) = _get_struct_d4IB7d().unpack(str[start:end])
      self.roi.do_rectify = bool(self.roi.do_rectify)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d4IB7d = None
def _get_struct_d4IB7d():
    global _struct_d4IB7d
    if _struct_d4IB7d is None:
        _struct_d4IB7d = struct.Struct("<d4IB7d")
    return _struct_d4IB7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from target_finder/target_locatorResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class target_locatorResponse(genpy.Message):
  _md5sum = "d5d4c33f7be4dba89b73ee608dd24d17"
  _type = "target_finder/target_locatorResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 final_cost_per_observation
geometry_msgs/Pose final_pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['final_cost_per_observation','final_pose']
  _slot_types = ['float64','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       final_cost_per_observation,final_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(target_locatorResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.final_cost_per_observation is None:
        self.final_cost_per_observation = 0.
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.Pose()
    else:
      self.final_cost_per_observation = 0.
      self.final_pose = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.final_cost_per_observation, _x.final_pose.position.x, _x.final_pose.position.y, _x.final_pose.position.z, _x.final_pose.orientation.x, _x.final_pose.orientation.y, _x.final_pose.orientation.z, _x.final_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.final_cost_per_observation, _x.final_pose.position.x, _x.final_pose.position.y, _x.final_pose.position.z, _x.final_pose.orientation.x, _x.final_pose.orientation.y, _x.final_pose.orientation.z, _x.final_pose.orientation.w,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.final_cost_per_observation, _x.final_pose.position.x, _x.final_pose.position.y, _x.final_pose.position.z, _x.final_pose.orientation.x, _x.final_pose.orientation.y, _x.final_pose.orientation.z, _x.final_pose.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.final_pose is None:
        self.final_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 64
      (_x.final_cost_per_observation, _x.final_pose.position.x, _x.final_pose.position.y, _x.final_pose.position.z, _x.final_pose.orientation.x, _x.final_pose.orientation.y, _x.final_pose.orientation.z, _x.final_pose.orientation.w,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
class target_locator(object):
  _type          = 'target_finder/target_locator'
  _md5sum = 'a26351e216e367a0883873c29f854fe0'
  _request_class  = target_locatorRequest
  _response_class = target_locatorResponse
