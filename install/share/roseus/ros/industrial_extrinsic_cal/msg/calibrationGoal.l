;; Auto-generated. Do not edit!


(when (boundp 'industrial_extrinsic_cal::calibrationGoal)
  (if (not (find-package "INDUSTRIAL_EXTRINSIC_CAL"))
    (make-package "INDUSTRIAL_EXTRINSIC_CAL"))
  (shadow 'calibrationGoal (find-package "INDUSTRIAL_EXTRINSIC_CAL")))
(unless (find-package "INDUSTRIAL_EXTRINSIC_CAL::CALIBRATIONGOAL")
  (make-package "INDUSTRIAL_EXTRINSIC_CAL::CALIBRATIONGOAL"))

(in-package "ROS")
;;//! \htmlinclude calibrationGoal.msg.html


(defclass industrial_extrinsic_cal::calibrationGoal
  :super ros::object
  :slots (_allowable_cost_per_observation ))

(defmethod industrial_extrinsic_cal::calibrationGoal
  (:init
   (&key
    ((:allowable_cost_per_observation __allowable_cost_per_observation) 0.0)
    )
   (send-super :init)
   (setq _allowable_cost_per_observation (float __allowable_cost_per_observation))
   self)
  (:allowable_cost_per_observation
   (&optional __allowable_cost_per_observation)
   (if __allowable_cost_per_observation (setq _allowable_cost_per_observation __allowable_cost_per_observation)) _allowable_cost_per_observation)
  (:serialization-length
   ()
   (+
    ;; float64 _allowable_cost_per_observation
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float64 _allowable_cost_per_observation
       (sys::poke _allowable_cost_per_observation (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float64 _allowable_cost_per_observation
     (setq _allowable_cost_per_observation (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get industrial_extrinsic_cal::calibrationGoal :md5sum-) "018b5c6376abafbce2c3211a0d675d06")
(setf (get industrial_extrinsic_cal::calibrationGoal :datatype-) "industrial_extrinsic_cal/calibrationGoal")
(setf (get industrial_extrinsic_cal::calibrationGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
float64 allowable_cost_per_observation

")



(provide :industrial_extrinsic_cal/calibrationGoal "018b5c6376abafbce2c3211a0d675d06")


