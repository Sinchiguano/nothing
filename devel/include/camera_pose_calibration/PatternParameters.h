// Generated by gencpp from file camera_pose_calibration/PatternParameters.msg
// DO NOT EDIT!


#ifndef CAMERA_POSE_CALIBRATION_MESSAGE_PATTERNPARAMETERS_H
#define CAMERA_POSE_CALIBRATION_MESSAGE_PATTERNPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace camera_pose_calibration
{
template <class ContainerAllocator>
struct PatternParameters_
{
  typedef PatternParameters_<ContainerAllocator> Type;

  PatternParameters_()
    : pattern_width(0)
    , pattern_height(0)
    , pattern_distance(0.0)
    , neighbor_distance(0.0)
    , valid_pattern_ratio_threshold(0.0)  {
    }
  PatternParameters_(const ContainerAllocator& _alloc)
    : pattern_width(0)
    , pattern_height(0)
    , pattern_distance(0.0)
    , neighbor_distance(0.0)
    , valid_pattern_ratio_threshold(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _pattern_width_type;
  _pattern_width_type pattern_width;

   typedef uint8_t _pattern_height_type;
  _pattern_height_type pattern_height;

   typedef double _pattern_distance_type;
  _pattern_distance_type pattern_distance;

   typedef double _neighbor_distance_type;
  _neighbor_distance_type neighbor_distance;

   typedef double _valid_pattern_ratio_threshold_type;
  _valid_pattern_ratio_threshold_type valid_pattern_ratio_threshold;





  typedef boost::shared_ptr< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> const> ConstPtr;

}; // struct PatternParameters_

typedef ::camera_pose_calibration::PatternParameters_<std::allocator<void> > PatternParameters;

typedef boost::shared_ptr< ::camera_pose_calibration::PatternParameters > PatternParametersPtr;
typedef boost::shared_ptr< ::camera_pose_calibration::PatternParameters const> PatternParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_pose_calibration::PatternParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_pose_calibration

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'camera_pose_calibration': ['/home/sinchiguano/yumi_depends_ws/src/camera_pose_calibration/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1072989cc839ba5aa0fd1ae7ff3a0522";
  }

  static const char* value(const ::camera_pose_calibration::PatternParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1072989cc839ba5aULL;
  static const uint64_t static_value2 = 0xa0fd1ae7ff3a0522ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_pose_calibration/PatternParameters";
  }

  static const char* value(const ::camera_pose_calibration::PatternParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 pattern_width\n\
uint8 pattern_height\n\
float64 pattern_distance\n\
float64 neighbor_distance\n\
float64 valid_pattern_ratio_threshold\n\
";
  }

  static const char* value(const ::camera_pose_calibration::PatternParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pattern_width);
      stream.next(m.pattern_height);
      stream.next(m.pattern_distance);
      stream.next(m.neighbor_distance);
      stream.next(m.valid_pattern_ratio_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PatternParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_pose_calibration::PatternParameters_<ContainerAllocator>& v)
  {
    s << indent << "pattern_width: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pattern_width);
    s << indent << "pattern_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pattern_height);
    s << indent << "pattern_distance: ";
    Printer<double>::stream(s, indent + "  ", v.pattern_distance);
    s << indent << "neighbor_distance: ";
    Printer<double>::stream(s, indent + "  ", v.neighbor_distance);
    s << indent << "valid_pattern_ratio_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.valid_pattern_ratio_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_POSE_CALIBRATION_MESSAGE_PATTERNPARAMETERS_H
