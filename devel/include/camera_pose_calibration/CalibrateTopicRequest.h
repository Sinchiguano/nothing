// Generated by gencpp from file camera_pose_calibration/CalibrateTopicRequest.msg
// DO NOT EDIT!


#ifndef CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATETOPICREQUEST_H
#define CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATETOPICREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <camera_pose_calibration/PatternParameters.h>

namespace camera_pose_calibration
{
template <class ContainerAllocator>
struct CalibrateTopicRequest_
{
  typedef CalibrateTopicRequest_<ContainerAllocator> Type;

  CalibrateTopicRequest_()
    : tag_frame()
    , target_frame()
    , point_cloud_scale_x(0.0)
    , point_cloud_scale_y(0.0)
    , pattern()  {
    }
  CalibrateTopicRequest_(const ContainerAllocator& _alloc)
    : tag_frame(_alloc)
    , target_frame(_alloc)
    , point_cloud_scale_x(0.0)
    , point_cloud_scale_y(0.0)
    , pattern(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tag_frame_type;
  _tag_frame_type tag_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_frame_type;
  _target_frame_type target_frame;

   typedef double _point_cloud_scale_x_type;
  _point_cloud_scale_x_type point_cloud_scale_x;

   typedef double _point_cloud_scale_y_type;
  _point_cloud_scale_y_type point_cloud_scale_y;

   typedef  ::camera_pose_calibration::PatternParameters_<ContainerAllocator>  _pattern_type;
  _pattern_type pattern;





  typedef boost::shared_ptr< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CalibrateTopicRequest_

typedef ::camera_pose_calibration::CalibrateTopicRequest_<std::allocator<void> > CalibrateTopicRequest;

typedef boost::shared_ptr< ::camera_pose_calibration::CalibrateTopicRequest > CalibrateTopicRequestPtr;
typedef boost::shared_ptr< ::camera_pose_calibration::CalibrateTopicRequest const> CalibrateTopicRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_pose_calibration

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'camera_pose_calibration': ['/home/sinchiguano/yumi_depends_ws/src/camera_pose_calibration/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0769d4513a9cf910e06da4a02178112c";
  }

  static const char* value(const ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0769d4513a9cf910ULL;
  static const uint64_t static_value2 = 0xe06da4a02178112cULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_pose_calibration/CalibrateTopicRequest";
  }

  static const char* value(const ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tag_frame\n\
string target_frame\n\
float64 point_cloud_scale_x\n\
float64 point_cloud_scale_y\n\
camera_pose_calibration/PatternParameters pattern\n\
\n\
================================================================================\n\
MSG: camera_pose_calibration/PatternParameters\n\
uint8 pattern_width\n\
uint8 pattern_height\n\
float64 pattern_distance\n\
float64 neighbor_distance\n\
float64 valid_pattern_ratio_threshold\n\
";
  }

  static const char* value(const ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tag_frame);
      stream.next(m.target_frame);
      stream.next(m.point_cloud_scale_x);
      stream.next(m.point_cloud_scale_y);
      stream.next(m.pattern);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibrateTopicRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_pose_calibration::CalibrateTopicRequest_<ContainerAllocator>& v)
  {
    s << indent << "tag_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tag_frame);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_frame);
    s << indent << "point_cloud_scale_x: ";
    Printer<double>::stream(s, indent + "  ", v.point_cloud_scale_x);
    s << indent << "point_cloud_scale_y: ";
    Printer<double>::stream(s, indent + "  ", v.point_cloud_scale_y);
    s << indent << "pattern: ";
    s << std::endl;
    Printer< ::camera_pose_calibration::PatternParameters_<ContainerAllocator> >::stream(s, indent + "  ", v.pattern);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_POSE_CALIBRATION_MESSAGE_CALIBRATETOPICREQUEST_H
