// Generated by gencpp from file industrial_extrinsic_cal/robot_joint_values_triggerGoal.msg
// DO NOT EDIT!


#ifndef INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_ROBOT_JOINT_VALUES_TRIGGERGOAL_H
#define INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_ROBOT_JOINT_VALUES_TRIGGERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace industrial_extrinsic_cal
{
template <class ContainerAllocator>
struct robot_joint_values_triggerGoal_
{
  typedef robot_joint_values_triggerGoal_<ContainerAllocator> Type;

  robot_joint_values_triggerGoal_()
    : joint_values()  {
    }
  robot_joint_values_triggerGoal_(const ContainerAllocator& _alloc)
    : joint_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_values_type;
  _joint_values_type joint_values;





  typedef boost::shared_ptr< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct robot_joint_values_triggerGoal_

typedef ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<std::allocator<void> > robot_joint_values_triggerGoal;

typedef boost::shared_ptr< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal > robot_joint_values_triggerGoalPtr;
typedef boost::shared_ptr< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal const> robot_joint_values_triggerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace industrial_extrinsic_cal

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'industrial_extrinsic_cal': ['/home/sinchiguano/yumi_depends_ws/devel/share/industrial_extrinsic_cal/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b79b974a6ae3f399e6d798ff6613e367";
  }

  static const char* value(const ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb79b974a6ae3f399ULL;
  static const uint64_t static_value2 = 0xe6d798ff6613e367ULL;
};

template<class ContainerAllocator>
struct DataType< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "industrial_extrinsic_cal/robot_joint_values_triggerGoal";
  }

  static const char* value(const ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the goal\n\
float64[] joint_values\n\
";
  }

  static const char* value(const ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_joint_values_triggerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::industrial_extrinsic_cal::robot_joint_values_triggerGoal_<ContainerAllocator>& v)
  {
    s << indent << "joint_values[]" << std::endl;
    for (size_t i = 0; i < v.joint_values.size(); ++i)
    {
      s << indent << "  joint_values[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_ROBOT_JOINT_VALUES_TRIGGERGOAL_H
