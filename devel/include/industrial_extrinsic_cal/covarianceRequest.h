// Generated by gencpp from file industrial_extrinsic_cal/covarianceRequest.msg
// DO NOT EDIT!


#ifndef INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_COVARIANCEREQUEST_H
#define INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_COVARIANCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace industrial_extrinsic_cal
{
template <class ContainerAllocator>
struct covarianceRequest_
{
  typedef covarianceRequest_<ContainerAllocator> Type;

  covarianceRequest_()
    : file_name()
    , block_name1()
    , request_type1(0)
    , scene_id1(0)
    , block_name2()
    , request_type2(0)
    , scene_id2(0)  {
    }
  covarianceRequest_(const ContainerAllocator& _alloc)
    : file_name(_alloc)
    , block_name1(_alloc)
    , request_type1(0)
    , scene_id1(0)
    , block_name2(_alloc)
    , request_type2(0)
    , scene_id2(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_name_type;
  _file_name_type file_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _block_name1_type;
  _block_name1_type block_name1;

   typedef int32_t _request_type1_type;
  _request_type1_type request_type1;

   typedef int32_t _scene_id1_type;
  _scene_id1_type scene_id1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _block_name2_type;
  _block_name2_type block_name2;

   typedef int32_t _request_type2_type;
  _request_type2_type request_type2;

   typedef int32_t _scene_id2_type;
  _scene_id2_type scene_id2;





  typedef boost::shared_ptr< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct covarianceRequest_

typedef ::industrial_extrinsic_cal::covarianceRequest_<std::allocator<void> > covarianceRequest;

typedef boost::shared_ptr< ::industrial_extrinsic_cal::covarianceRequest > covarianceRequestPtr;
typedef boost::shared_ptr< ::industrial_extrinsic_cal::covarianceRequest const> covarianceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace industrial_extrinsic_cal

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'industrial_extrinsic_cal': ['/home/sinchiguano/yumi_depends_ws/devel/share/industrial_extrinsic_cal/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d249a007c3eedd7d603e503a8cf184c";
  }

  static const char* value(const ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d249a007c3eedd7ULL;
  static const uint64_t static_value2 = 0xd603e503a8cf184cULL;
};

template<class ContainerAllocator>
struct DataType< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "industrial_extrinsic_cal/covarianceRequest";
  }

  static const char* value(const ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string file_name\n\
string block_name1\n\
int32 request_type1\n\
int32 scene_id1\n\
string block_name2\n\
int32 request_type2\n\
int32 scene_id2\n\
";
  }

  static const char* value(const ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.file_name);
      stream.next(m.block_name1);
      stream.next(m.request_type1);
      stream.next(m.scene_id1);
      stream.next(m.block_name2);
      stream.next(m.request_type2);
      stream.next(m.scene_id2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct covarianceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::industrial_extrinsic_cal::covarianceRequest_<ContainerAllocator>& v)
  {
    s << indent << "file_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file_name);
    s << indent << "block_name1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.block_name1);
    s << indent << "request_type1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_type1);
    s << indent << "scene_id1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scene_id1);
    s << indent << "block_name2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.block_name2);
    s << indent << "request_type2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.request_type2);
    s << indent << "scene_id2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scene_id2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDUSTRIAL_EXTRINSIC_CAL_MESSAGE_COVARIANCEREQUEST_H
