# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from industrial_extrinsic_cal/manual_target_locationGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class manual_target_locationGoal(genpy.Message):
  _md5sum = "da35bff99f1ba8b9eb51a8eadd1f4616"
  _type = "industrial_extrinsic_cal/manual_target_locationGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
string instructions
uint32 target_type  
string image_topic
uint32 roi_min_x
uint32 roi_min_y
uint32 roi_max_x
uint32 roi_max_y
uint32 grid_rows
uint32 grid_cols
"""
  __slots__ = ['instructions','target_type','image_topic','roi_min_x','roi_min_y','roi_max_x','roi_max_y','grid_rows','grid_cols']
  _slot_types = ['string','uint32','string','uint32','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       instructions,target_type,image_topic,roi_min_x,roi_min_y,roi_max_x,roi_max_y,grid_rows,grid_cols

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(manual_target_locationGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.instructions is None:
        self.instructions = ''
      if self.target_type is None:
        self.target_type = 0
      if self.image_topic is None:
        self.image_topic = ''
      if self.roi_min_x is None:
        self.roi_min_x = 0
      if self.roi_min_y is None:
        self.roi_min_y = 0
      if self.roi_max_x is None:
        self.roi_max_x = 0
      if self.roi_max_y is None:
        self.roi_max_y = 0
      if self.grid_rows is None:
        self.grid_rows = 0
      if self.grid_cols is None:
        self.grid_cols = 0
    else:
      self.instructions = ''
      self.target_type = 0
      self.image_topic = ''
      self.roi_min_x = 0
      self.roi_min_y = 0
      self.roi_max_x = 0
      self.roi_max_y = 0
      self.grid_rows = 0
      self.grid_cols = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.instructions
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.target_type))
      _x = self.image_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6I().pack(_x.roi_min_x, _x.roi_min_y, _x.roi_max_x, _x.roi_max_y, _x.grid_rows, _x.grid_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.instructions = str[start:end].decode('utf-8')
      else:
        self.instructions = str[start:end]
      start = end
      end += 4
      (self.target_type,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_topic = str[start:end].decode('utf-8')
      else:
        self.image_topic = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.roi_min_x, _x.roi_min_y, _x.roi_max_x, _x.roi_max_y, _x.grid_rows, _x.grid_cols,) = _get_struct_6I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.instructions
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_I().pack(self.target_type))
      _x = self.image_topic
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6I().pack(_x.roi_min_x, _x.roi_min_y, _x.roi_max_x, _x.roi_max_y, _x.grid_rows, _x.grid_cols))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.instructions = str[start:end].decode('utf-8')
      else:
        self.instructions = str[start:end]
      start = end
      end += 4
      (self.target_type,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_topic = str[start:end].decode('utf-8')
      else:
        self.image_topic = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.roi_min_x, _x.roi_min_y, _x.roi_max_x, _x.roi_max_y, _x.grid_rows, _x.grid_cols,) = _get_struct_6I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6I = None
def _get_struct_6I():
    global _struct_6I
    if _struct_6I is None:
        _struct_6I = struct.Struct("<6I")
    return _struct_6I
